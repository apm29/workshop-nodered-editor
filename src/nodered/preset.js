export const NodeTypes = [
  "comment",
  "debug",
  "inject",
  "complete",
  "status",
  "link in",
  "link call",
  "catch",
  "link out",
  "function",
  "switch",
  "change",
  "range",
  "template",
  "delay",
  "trigger",
  "exec",
  "rbe",
  "moving-average",
  "mqtt in",
  "mqtt out",
  "http in",
  "http response",
  "http request",
  "websocket in",
  "websocket out",
  "tcp in",
  "tcp out",
  "tcp request",
  "udp in",
  "udp out",
  "split",
  "join",
  "sort",
  "batch",
  "csv",
  "html",
  "json",
  "xml",
  "yaml",
  "file",
  "file in",
  "watch",
  "influxdb in",
  "mysql",
  "influxdb out",
  "influxdb batch",
  "ui_button",
  "ui_dropdown",
  "ui_switch",
  "ui_slider",
  "ui_numeric",
  "ui_text_input",
  "ui_date_picker",
  "ui_colour_picker",
  "ui_form",
  "ui_text",
  "ui_gauge",
  "ui_chart",
  "ui_audio",
  "ui_toast",
  "ui_ui_control",
  "ui_template",
];

export const ImplementedNodeTypes = [
  "comment",
  "debug",
  "inject",
  "complete",
  "status",
  "function",
  "switch",
  "delay",
  // "exec",
  "mqtt in",
  "mqtt out",
  "http request",
  "websocket in",
  "websocket out",
  "influxdb in",
  "influxdb out",
  "ui_gauge",
];

export const ConfigTypes = ["mqtt-broker", "influxdb", "websocket-client", "websocket-listener", "ui_group", "ui_tab"];
export const TabTypes = ["tab"];

export const NodeDataCreator = {
  "comment": () => ({
    type: "comment",
    name: "注释",
    info: "",
  }),
  "debug": () => ({
    type: "debug",
    name: "调试",
    active: true,
    tosidebar: true,
    console: false,
    tostatus: false,
    complete: "payload",
    statusVal: "",
    statusType: "auto",
    targetType: "msg",
  }),
  "mqtt in": () => ({
    type: "mqtt in",
    name: "mqtt in",
    topic: "",
    qos: "2",
    datatype: "auto-detect",
    broker: "",
    nl: false,
    rap: true,
    rh: 0,
    inputs: 0,
  }),
  "mqtt out": () => ({
    type: "mqtt out",
    name: "mqtt out",
    topic: "",
    qos: "1",
    retain: "",
    respTopic: "",
    contentType: "",
    userProps: "",
    correl: "",
    expiry: "",
    broker: "",
  }),
  "inject": () => ({
    type: "inject",
    name: "注入",
    props: [
      {
        p: "payload",
        vt: "str",
      },
      {
        p: "topic",
        vt: "str",
      },
    ],
    repeat: "",
    crontab: "",
    once: false,
    onceDelay: 0.1,
    topic: "",
    payload: "",
    payloadType: "date",
  }),
  "complete": () => ({
    type: "complete",
    name: "完成",
    scope: [],
    uncaught: false,
  }),
  "status": () => ({
    type: "status",
    name: "报告状态",
    scope: null,
    uncaught: false,
  }),
  "delay": () => ({
    type: "delay",
    name: "延迟",
    pauseType: "delay",
    timeout: "5",
    timeoutUnits: "milliseconds",
    rate: "1",
    nbRateUnits: "1",
    rateUnits: "second",
    randomFirst: "1",
    randomLast: "5",
    randomUnits: "seconds",
    drop: false,
    allowrate: false,
    outputs: 1,
  }),
  "function": () => ({
    type: "function",
    name: "函数",
    func: "\nreturn msg;",
    outputs: 1,
    noerr: 0,
    initialize: "",
    finalize: "",
    libs: [],
  }),
  "switch": () => ({
    type: "switch",
    name: "switch",
    property: "payload",
    propertyType: "msg",
    rules: [
      {
        t: "eq",
        v: "",
        vt: "str",
      },
    ],
    checkall: "true",
    repair: false,
    outputs: 1,
  }),
  "influxdb in": () => ({
    type: "influxdb in",
    name: "influxdb in",
    query: "",
    rawOutput: false,
    precision: "",
    retentionPolicy: "",
    org: "atcc",
  }),
  "influxdb out": () => ({
    type: "influxdb out",
    name: "influxdb out",
    measurement: "N_P1",
    precision: "",
    retentionPolicy: "",
    database: "database",
    precisionV18FluxV20: "ms",
    retentionPolicyV18Flux: "",
    org: "atcc",
    bucket: "3fc_cf_sbzt",
  }),
  "http request": () => ({
    type: "http request",
    name: "Http请求",
    method: "GET",
    ret: "txt",
    paytoqs: "ignore",
    url: "",
    persist: false,
    authType: "",
    senderr: false,
    headers: [],
  }),
  "websocket in": () => ({
    type: "websocket in",
    name: "Websocket In",
    "name": "",
    "server": "",
    "client": "",
  }),
  "websocket out": () => ({
    type: "websocket out",
    name: "Websocket out",
    "name": "",
    "server": "",
    "client": "",
  }),
  "ui_guage": () => ({
    type: "ui_gauge",
    name: "仪表盘组件",
    group: "",
    order: 0,
    width: 0,
    height: 0,
    gtype: "gage",
    title: "gauge",
    label: "units",
    format: "{{value}}",
    min: 0,
    max: 10,
    colors: ["#00b500", "#e6e600", "#ca3838"],
    seg1: "",
    seg2: "",
    className: "",
  })
}
